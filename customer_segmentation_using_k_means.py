# -*- coding: utf-8 -*-
"""Customer_Segmentation_Using_K-Means.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rF1nMpFWuBAqu1hVklJaJkdktg9ycAJ4

Importing the Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""Data Collection and Analysis"""

# loading data
customer_data = pd.read_csv('/content/Mall_Customers.csv')

customer_data.head()

customer_data.shape

# getting information about dataset
customer_data.info()

# checking for missing values
customer_data.isnull().sum()

"""Choosing annual income and spending columns only"""

X = customer_data.iloc[:, [3,4]].values

print(X)

"""Choosing the number of clusters

WCSS -> Within Clusters Sum of Squares
"""

# finding wcss values for different number pf clusters

wcss = []

for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X)

    wcss.append(kmeans.inertia_)

# plot an elbow graph to find minimum value for clusters

sns.set()
plt.plot(range(1,11), wcss)
plt.title('The Elbow point graph')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

"""Here the elbow points are at 3 and 5 so optimally we will take 5 clusters.

Training the K-Means model
"""

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=0)

#returning label for each data point based on their cluster
Y = kmeans.fit_predict(X)
print(Y)

"""All data points with same values are one cluster

5 clusters - 0,1,2,3,4

Visualizing all the Clusters.
"""

# plotting all the clusters and their centroids
plt.figure(figsize=(8,8))
plt.scatter(X[Y==0,0], X[Y==0,1], s=50, c='green', label='Cluster 1')
plt.scatter(X[Y==1,0], X[Y==1,1], s=50, c='red', label='Cluster 2')
plt.scatter(X[Y==2,0], X[Y==2,1], s=50, c='blue', label='Cluster 3')
plt.scatter(X[Y==3,0], X[Y==3,1], s=50, c='yellow', label='Cluster 4')
plt.scatter(X[Y==4,0], X[Y==4,1], s=50, c='violet', label='Cluster 5')

# plotting the clusters
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c='cyan', label='Centroids')
plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()

